package com.rhejinald.euler.problems;

import com.rhejinald.euler.lib.GeometryNumbers;
import org.junit.Test;

/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Pentagonal	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
 * Hexagonal	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
 *
 * It can be verified that T285 = P165 = H143 = 40755.
 * Find the next triangle number that is also pentagonal and hexagonal.
 * ==========================
 * Notes:
 * So this the third or fourth question looking at triangle/pentagonal numbers, now we're introducing hex numbers, so
 * I've pulled those out to a GeometryNumbers class, cause I bet it'll show up again.
 *
 * This should be easy though - we're looking for the next hexagonal number, but there are fewer of them within any
 * given upper bound, so we'll iterate that until we find one that matches both, checking for pentagonality first for
 * performance.
 *
 * Got the answer easily, but had to bolster GeometryNumbers and QuadraticEquation for overflow cases, buffing with
 * long types instead of int
 *
 * Attempt 1: 55385 (55385th Triangle number), 12 ms - wrong??
 * Attempt 2: 1533776805 (not the n value, but Tn/Pn/Hn. Was going a step too far. - Correct! (8ms) 52420th person,
 * solved jan 31 2017
 */
public class Problem45 {
    @Test
    public void testProblem45() throws Exception {
        for (int i = 144; i < 1000000; i++) {
            long hexagonalNumber = GeometryNumbers.getHexagonalNumber(i);
            if(GeometryNumbers.isPentagonalNumber(hexagonalNumber) && GeometryNumbers.isTriangleNumber(hexagonalNumber)){
                System.out.println((hexagonalNumber));
                break;
            }
        }

    }
}
