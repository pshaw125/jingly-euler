package com.rhejinald.euler.problems;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.rhejinald.euler.lib.GeometryNumbers;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *   4  7  10  13  16  19  22  25   28 - deltas
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
 * D = |Pk − Pj| is minimised; what is the value of D?
 * ====================================
 * Notes:
 * Let's assume Pj < Pk
 * Pk + Pj in set
 * Pk - Pj in set
 * What is the smallest Pk - Pj?
 *
 * We can smartly check the lowest D as we increase our boundaries
 *
 * set ceiling to X
 * new maxRange is P(X+1) - P(X)
 * For each j and k , where 0 < j < k ≤ x, and n,m are both pentagonal numbers
 *
 * Attempt 1: 5482660 [j=1560090,k=7042750, diff=5482660] - Correct! Jan 31 2017, run time 273ms, 41684th person to solve
 */
public class Problem44 {

    @Test
    public void testProblem44() throws Exception {
        HashMap<Integer, Integer> maxIndicesChecked = Maps.newHashMap();
        ArrayList<String> results = Lists.newArrayList();
        int currentCeilingIndex = 2;
        double currentCeilingValue = GeometryNumbers.getPentagonalNumber(2);
        while(results.size()==0 && currentCeilingIndex < 10000){
            for (int jIndex = 1; jIndex <= currentCeilingIndex - 2; jIndex++) {
                Integer kIndex = maxIndicesChecked.getOrDefault(jIndex, jIndex + 1);
                processK(maxIndicesChecked, currentCeilingValue, jIndex, kIndex, results);
            }
            currentCeilingIndex++;
            currentCeilingValue = GeometryNumbers.getPentagonalNumber(currentCeilingIndex);
        }
        System.out.println(results);
    }

    private void processK(HashMap<Integer, Integer> maxIndicesChecked, double currentCeilingValue, int jIndex, Integer kIndex, ArrayList<String> results) {
        while(true){
            long pK = GeometryNumbers.getPentagonalNumber(kIndex);
            long pJ = GeometryNumbers.getPentagonalNumber(jIndex);
            if(pK - pJ > currentCeilingValue){
                return;
            }
            maxIndicesChecked.put(jIndex, kIndex);
            if(isFullyPentagonal(pJ, pK)){
                results.add("j="+pJ + ",k=" + pK + ", diff=" + (pK-pJ));
                return;
            }
            kIndex++;
        }
    }

    /**
     * @param j assumed pentagonal
     * @param k assumed pentagonal
     * @return true IFF k+j is pentagonal and k-j is pentagona
     */
    private boolean isFullyPentagonal(long j, long k) {
        return k>j && GeometryNumbers.isPentagonalNumber(k-j) && GeometryNumbers.isPentagonalNumber(k+j);
    }

}
