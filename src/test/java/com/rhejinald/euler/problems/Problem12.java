package com.rhejinald.euler.problems;

import com.google.common.collect.Lists;
import com.rhejinald.euler.lib.Factors;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

public class Problem12 {
    /**
     * Problem 12 - HighlyDivisibleTriangularNumber
     * <p>
     * <p>
     * problem: the sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number = 1+2+3+4+5+6+7=28
     * First 10 terms would be 1,3,6,10,15,21,28,36,45,55
     * <p>
     * Factors:
     * 1: 1
     * 3: 1,3
     * 6: 1,2,3,6
     * 10: 1,2,5,10
     * 15: 1,3,5,15
     * 21: 1,3,7,21
     * 28: 1,2,4,7,14,28
     * <p>
     * 28 is the first triangle number to have over 5 divisors
     * <p>
     * What is the first triangle number to have over 500 divisors?
     */

    @Test
    public void problem() {

        final List<Long> triangleNumbers = getTriangleNumbers(13000);

        long mostFactors = 0L;
        long bestNumber = 0L;

        for (Long triangleNumber : triangleNumbers) {
            final Set<Long> factors = new Factors().getFactors(triangleNumber);
            if (factors.size() > 500) {
                System.out.println("number" + triangleNumber);
                System.out.println("factor count " + factors.size());
                return;
            }
            if (factors.size() > mostFactors) {
                mostFactors = factors.size();
                bestNumber = triangleNumber;
            }
        }

        fail("not found :(" + "Best so far: " + bestNumber + "(" + mostFactors + ")");
    }

    @Test
    public void testGetTriangleNumber() throws Exception {
        assertThat(getTriangleNumbers(2)).containsOnly(1L, 3L);
        assertThat(getTriangleNumbers(5)).containsOnly(1L, 3L, 6L, 10L, 15L);
        final List<Long> triangleNumbers10 = getTriangleNumbers(10);
        assertThat(triangleNumbers10).containsOnly(1L, 3L, 6L, 10L, 15L, 21L, 28L, 36L, 45L, 55L);
        assertThat(triangleNumbers10.get(triangleNumbers10.size() - 1)).isEqualTo(55L);
    }

    private List<Long> getTriangleNumbers(int count) {
        final ArrayList<Long> numbers = Lists.newArrayList();
        long runningTotal = 0;
        for (int i = 1; i <= count; i++) {
            runningTotal += i;
            numbers.add(runningTotal);
        }
        return numbers;
    }


}
